@use "../utils/module" as utils;
@use "../utils/system";
@use "sass:meta";

// Style System definitions
// Use this if your working with the whole system
// Avoild if you already have your styles setup and just are using some modules
//
// @group Base
@mixin initialize {
	// Svg rule path
	$rule-svg-path-start: "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='";
	$rule-svg-path-y: "#{$rule-svg-path-start}1' height='12' viewBox='0 0 1 12'%3E%3Crect width='1' height='6' transform='translate(0 3)' fill='%23";
	$rule-svg-path-x: "#{$rule-svg-path-start}12' height='1' viewBox='0 0 12 1'%3E%3Crect width='6' height='1' transform='translate(3 0)' fill='%23";
	$rule-svg-path-end: "'/%3E%3C/svg%3E";

	@layer definitions {
		code {
			font-family: utils.family(code);
		}

		dialog {
			margin: auto;
			background: transparent;
			overflow: visible;
			position: fixed;

			> .#{utils.$layout-modal} {
				max-width: calc(100vw - 2.4rem);
				max-width: calc(100dvw - 2.4rem);
				max-height: calc(100vh - 2.4rem);
				max-height: calc(100dvh - 2.4rem);
			}

			&::backdrop {
				background: utils.color(dark, 0.3);
				backdrop-filter: blur(1rem) saturate(2);
			}

			&[open]:has(dialog[open]) {
				transform: scale(0.9);
			}
		}

		hr {
			opacity: 0.2;
			background-repeat: round;
			background-position: 50% 50%;
			flex: 0 0 auto;
			display: block;

			@layer defaults {
				// @defaults margin
				& {
					height: 2px;
					width: calc(100% + 1rem);
					margin: 0 -0.4rem;
				}
			}

			&:last-child:not(:nth-child(2), :only-child) {
				display: none;
			}

			// Delimiter theme
			//
			// @group Modifiers
			@include utils.extend-themes using($name, $value, $is-default) {
				background-image: url("#{$rule-svg-path-x}#{system.str-replace(#{$value}, '#')}#{$rule-svg-path-end}");
			}

			&.#{utils.$prefix-default}--vertical {
				@include utils.extend-viewports-classes {
					@layer defaults {
						// @defaults margin
						& {
							width: 2px;
							height: 100%;
							height: calc(100% + 1rem);
							margin: -0.4rem 0;
						}
					}

					// Delimiter theme
					//
					// @group Modifiers
					@include utils.extend-themes using($name, $value, $is-default) {
						background-image: url("#{$rule-svg-path-y}#{system.str-replace(#{$value}, '#')}#{$rule-svg-path-end}");
					}
				}
			}
		}
	}
	@layer defaults {
		::selection {
			background: utils.$color-select-bg;
			color: utils.$color-select-txt;
		}

		* {
			line-height: utils.$size-line-height;
			color: inherit;
			text-shadow: inherit;
		}

		// broken asset fallback styles
		img,
		iframe {
			display: block;
			overflow: hidden;
			color: transparent;

			// bgColor
			@include utils.linear-gradient(135deg, #d4d4d4 0, #00b6ff 500%);

			&::before {
				content: "\f7a9";
				font-family: utils.family(icons);
				font-weight: 900;
				color: utils.color(danger);
				font-size: utils.size(xx);
				width: 100%;
				height: 100%;
				position: absolute;
				top: 0;
				left: 0;
				padding: 1rem;

				@include utils.flex-box(column, nowrap, center, center);
			}
		}

		* > {
			a,
			b,
			h1,
			h2,
			h3,
			h4,
			h5,
			h6,
			th,
			button,
			strong {
				// @defaults txtWeight
				font-weight: utils.weight(bold);
			}
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
			font-family: utils.family(title);
		}

		h1:not([class*="swal"]) {
			// @defaults txtSize
			font-size: utils.size(xl);

			@if utils.$allow-responsive {
				@media (width > utils.$querie-tablet) {
					font-size: utils.size(xx);
				}
			}
		}

		h2:not([class*="swal"]) {
			// @defaults txtSize
			font-size: utils.size(lg);

			@if utils.$allow-responsive {
				@media (width > utils.$querie-tablet) {
					font-size: utils.size(xl);
				}
			}
		}

		h1:not([class*="swal"]),
		h2:not([class*="swal"]) {
			br {
				display: none;
			}

			@if utils.$allow-responsive {
				@media (width > utils.$querie-tablet) {
					br {
						display: inline;
					}
				}
			}
		}

		h3:not([class*="swal"]) {
			// @defaults txtSize
			font-size: utils.size(lg);
		}

		h4:not([class*="swal"]) {
			// @defaults txtSize
			font-size: utils.size(md);
		}

		html {
			width: 100%;
			height: 100%;
			overflow: hidden auto;
			font-size: 98%;
			font-weight: utils.weight();
			color: utils.$color-text;
			line-height: utils.$size-line-height;

			// Dinamically switch UI size
			@media (hover: none) {
				@if utils.$allow-responsive {
					@media (width <= utils.$querie-tv) {
						font-size: 100%;
					}
					@media (width <= utils.$querie-desktop) {
						font-size: 102%;
					}
					@media (width <= utils.$querie-tablet) {
						font-size: 104%;
					}
					@media (width <= utils.$querie-smartphone) {
						font-size: 106%;
					}
					@media (width <= utils.$querie-smartwatch) {
						font-size: 108%;
					}
				}
			}
		}

		body {
			min-height: 100%;
			width: 100%;
			font-family: utils.family(default);
			font-size: utils.size();
			overflow: hidden;
			background-color: utils.$color-bg;

			@if utils.$allow-responsive {
				@media (width <= utils.$querie-tablet) and (hover: none) {
					@supports (-moz-appearance: none) {
						// firefox fix, scroll bug on android
						width: 100%;
						height: 100%;
						overflow: hidden auto;
					}
				}
			}

			th,
			td {
				&.#{utils.$prefix-default}--sticky {
					background-color: utils.$color-bg;
				}
			}
		}
	}
}
