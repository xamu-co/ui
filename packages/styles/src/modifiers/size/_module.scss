// Forward here to minimize imports
@forward "../../utils/module";

@use "../../utils/module";
@use "sass:math";
@use "sass:string";

// Gutters
@mixin extend-gutters($property) {
	@include module.extend-viewports-classes {
		#{$property}: 1rem;
	}

	// all sides
	&-0,
	&-none {
		@include module.extend-viewports-classes {
			#{$property}: unset;
			#{$property}: none;
			#{$property}: 0;
		}
	}

	// X axis
	&X {
		@include module.extend-viewports-classes {
			#{$property}-left: 1rem;
			#{$property}-right: 1rem;
		}

		&-0,
		&-none {
			@include module.extend-viewports-classes {
				#{$property}-left: unset;
				#{$property}-left: none;
				#{$property}-left: 0;
				#{$property}-right: unset;
				#{$property}-right: none;
				#{$property}-right: 0;
			}
		}
	}

	// Y axis
	&Y {
		@include module.extend-viewports-classes {
			#{$property}-top: 1rem;
			#{$property}-bottom: 1rem;
		}

		&-0,
		&-none {
			@include module.extend-viewports-classes {
				#{$property}-top: unset;
				#{$property}-top: none;
				#{$property}-top: 0;
				#{$property}-bottom: unset;
				#{$property}-bottom: none;
				#{$property}-bottom: 0;
			}
		}
	}

	@for $i from 1 through module.$loop-gaps {
		$value: math.div($i, 3);

		// all sides
		&-#{$i * 5} {
			@include module.extend-viewports-classes {
				#{$property}: $value * 1rem;
			}
		}

		// X axis
		&X-#{$i * 5} {
			@include module.extend-viewports-classes {
				#{$property}-left: $value * 1rem;
				#{$property}-right: $value * 1rem;
			}
		}

		// Y axis
		&Y-#{$i * 5} {
			@include module.extend-viewports-classes {
				#{$property}-top: $value * 1rem;
				#{$property}-bottom: $value * 1rem;
			}
		}
	}

	// property directions
	//
	// @group GlobalModifiers
	$directions: top, right, bottom, left;

	@each $direction in $directions {
		// property direction defaults
		&#{module.capitalize($direction)} {
			@include module.extend-viewports-classes {
				#{$property}-#{$direction}: 1rem;
			}

			&-0,
			&-none {
				@include module.extend-viewports-classes {
					#{$property}-#{$direction}: unset;
					#{$property}-#{$direction}: none;
					#{$property}-#{$direction}: 0;
				}
			}

			@for $i from 1 through module.$loop-gaps {
				&-#{$i * 5} {
					@include module.extend-viewports-classes {
						#{$property}-#{$direction}: math.div($i, 3) * 1rem;
					}
				}
			}
		}
	}
}

// Dimensions
@mixin extend-dimension($property) {
	&-quarter,
	&-25 {
		@include module.extend-viewports-classes {
			#{$property}: 25%;
		}
	}

	&-third,
	&-33 {
		@include module.extend-viewports-classes {
			#{$property}: 33%;
		}
	}

	&-half,
	&-50 {
		@include module.extend-viewports-classes {
			#{$property}: 50%;
		}
	}

	&-0 {
		@include module.extend-viewports-classes {
			#{$property}: 0;
		}
	}

	&-none {
		@include module.extend-viewports-classes {
			#{$property}: unset;
			#{$property}: none;
		}
	}

	// 100% size
	&-100,
	&-full {
		@include module.extend-viewports-classes {
			#{$property}: 100%;
		}
	}

	@each $size in module.$size-px {
		&-#{$size} {
			@include module.extend-viewports-classes {
				#{$property}: math.round(math.div($size, 15)) * 1rem;
			}
		}
	}
}

// Viewport based dimensions
// --maxWidth, --maxHeight, --minWidth, --minHeight
@mixin extend-dimension-viewport($property, $model) {
	// vh or vw
	$vm: "v" + string.slice($model, 1, 1);
	$unit-old: if($vm == "vh", 1vh, 1vw);
	$unit: if($vm == "vh", 1dvh, 1dvw);

	// default viewport based constrains
	&#{module.capitalize($vm)} {
		@include module.extend-viewports-classes {
			#{$property}: 25 * $unit-old;
			#{$property}: 25 * $unit;
		}

		@for $i from 3 through module.$loop-dimensions {
			&-#{$i * 10} {
				@include module.extend-viewports-classes {
					#{$property}: ($i * 10) * $unit-old;
					#{$property}: ($i * 10) * $unit;
				}
			}
		}
	}
}

// All dimensions
@mixin extend-dimensions($property) {
	@include extend-dimension($property);
	@include extend-dimension-viewport($property, width);
	@include extend-dimension-viewport($property, height);
}
