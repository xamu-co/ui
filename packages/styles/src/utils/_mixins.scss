@use "system";
@use "variables";
@use "sass:meta";
@use "sass:math";
@use "sass:string";

/*
	A personal collection of usefull mixins
	I created the flexbox one and consider it the most useful
	Some of them are not that necesary cuz the were mean for prefixing, but autoprefixer solves that already
	
	assumes variables have already been imported
*/

$default-viewports: if(
	variables.$allow-responsive-classes-all-viewports,
	variables.$viewports,
	variables.$common-viewports
);

// Viewport extend
// This mixin is used to extend classes with responsive behavior based on viewport sizes.
// It generates classes for each viewport defined in the $viewports map.
//
// @param {Boolean} $desktop-first - If true, generates desktop-first classes. Default is false.
// @param {Map} $viewports - A map of viewport names and their corresponding breakpoints. Default is $default-viewports.
// @param {Boolean} $omit-media - If true, media queries are omitted, to allow nesting this mixin within modifiers that affect other modifiers. Default is false.
// @param {Boolean} $not - If true, generates classes for 'not' condition. Default is false.
//
@mixin extend-viewports-classes(
	$desktop-first: variables.$allow-responsive-classes-desktop-first,
	$viewports: $default-viewports,
	$omit-media: false,
	$omit-non-media: false
) {
	@if not $omit-non-media {
		@content;
	}

	@if variables.$allow-responsive-classes {
		@each $name, $viewport in $viewports {
			// default: class selector
			&\:#{$name} {
				@if $omit-media {
					@content;
				} @else {
					// mobile first
					@media (min-width: ($viewport + 1)) {
						@content;
					}
				}

				@if $desktop-first {
					&-inv {
						@if $omit-media {
							@content;
						} @else {
							// mobile last
							@media (max-width: $viewport) {
								@content;
							}
						}
					}
				}
			}
		}
	}
}

// device type extend
@mixin extend-device-interactions($touch: false) {
	@content;

	@if variables.$allow-responsive-classes {
		@each $selector in & {
			// desktop only
			@media (any-pointer: coarse) {
				@at-root .hover\:#{system.str-replace(#{$selector},".")} {
					@content;
				}
			}

			@if $touch {
				// mobile only
				@media (hover: none) {
					@at-root .touch\:#{system.str-replace(#{$selector},".")} {
						@content;
					}
				}
			}
		}
	}
}

// Create modifiers based on map
@mixin extend-maps($map, $selector, $default: false, $default-condition: null) {
	@each $name, $value in $map {
		$resolve-selector: meta.call($selector, $name);

		@if $default and $name == $default {
			// first to be overriden, default
			&#{$default-condition} {
				@content ($name, $value, true);
			}
		}
		&#{$resolve-selector} {
			@content ($name, $value, false);
		}
	}
}

// ease the use of modifier extend for colors
// relies on extend-maps
@function color-selector($name) {
	@return "-#{$name}";
}

@mixin extend-colors($default: null, $shade: false) {
	@include extend-maps(variables.$colors, meta.get-function("color-selector"), $default)
		using($name, $value, $is-default) {
		// plain color
		@content ($name, $value, $is-default);

		// shades of color
		@if not $is-default and $shade {
			@for $i from 1 through 9 {
				&#{$i} {
					@content ($name, rgba($value, math.div($i, 10)),false);
				}
			}
		}
	}
}

// ease the use of modifier extend for sizes
// relies on extend-maps
@function size-selector($name) {
	@return ".#{variables.$prefix-default}--size-#{$name}";
}

@mixin extend-sizes(
	$default: md,
	$viewports: $default-viewports,
	$selector: meta.get-function("size-selector"),
	$default-selector: ':not([class*="--size-"])'
) {
	$i: 0; // unit

	@include extend-maps(variables.$font-sizes, $selector, $default, $default-selector)
		using($name, $value, $is-default) {
		$unit: if($i > 1, $i, 2);

		@if $is-default {
			@content ($value, $unit);
		} @else {
			@include extend-viewports-classes($viewports: $viewports) {
				@content ($value, $unit);
			}

			$i: $i + 1;
		}
	}
}

// simple theme
@function theme-selector($name) {
	@return ".#{variables.$prefix-default}--tm-#{$name}";
}

@mixin extend-themes($default: secondary) {
	@include extend-maps(
			variables.$colors,
			meta.get-function("theme-selector"),
			$default,
			':not([class*="--tm-"])'
		)
		using($name, $value, $is-default) {
		@content ($name, $value, $is-default);
	}
}

// union theme
@mixin extend-unions($theme-default: secondary, $base-default: light) {
	// theme color - base color
	@each $theme, $theme-value in variables.$theme-colors {
		@each $base, $base-value in variables.$base-colors {
			@if $theme == $theme-default and $base == $base-default {
				// first to be overriden, default
				&:not([class*="--tm-"]) {
					@content ($theme, $theme-value, $base, $base-value, true);
				}
			}
			&.#{variables.$prefix-default}--tm-#{$theme}-#{$base} {
				@content ($theme, $theme-value, $base, $base-value, false);
			}
		}
	}

	// base color - theme color
	@each $base, $base-value in variables.$base-colors {
		@each $theme, $theme-value in variables.$theme-colors {
			&.#{variables.$prefix-default}--tm-#{$base}-#{$theme} {
				@content ($base, $base-value, $theme, $theme-value, false);
			}
		}
	}

	// theme color - theme color
	@each $theme1, $theme1-value in variables.$theme-colors {
		@each $theme2, $theme2-value in variables.$theme-colors {
			@if $theme1 != $theme2 {
				&.#{variables.$prefix-default}--tm-#{$theme1}-#{$theme2} {
					@content ($theme1, $theme1-value, $theme2, $theme2-value, false);
				}
			}
		}
	}

	// light - dark
	&.#{variables.$prefix-default}--tm-light-dark {
		@content (light, variables.$color-light, dark, variables.$color-dark, false);
	}

	// dark - light
	&.#{variables.$prefix-default}--tm-dark-light {
		@content (dark, variables.$color-dark, light, variables.$color-light, false);
	}
}

// flexbox en una sola linea
// ej: row, nowrap, space-around, strecth
@mixin flex-box($t, $m, $j, $a, $d: flex) {
	display: $d;
	flex-flow: $t $m;
	justify-content: $j;
	align-items: $a;
}

// Mixin printing a linear-gradient
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
	@if system.is-direction($direction) == false {
		$color-stops: ($direction, $color-stops);
		$direction: 180deg;
	}

	background-image: linear-gradient($direction, $color-stops);
}
